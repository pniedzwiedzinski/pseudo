build: off

environment:
  global:
    # SDK v7.0 MSVC Express 2008's SetEnv.cmd script will fail if the
    # /E:ON and /V:ON options are not enabled in the batch script intepreter
    # See: http://stackoverflow.com/a/13751649/163740
    CMD_IN_ENV: "cmd /E:ON /V:ON /C .\\scripts\\run_with_env.cmd"

  matrix:
    - PYTHON: "C:\\Python36"
      PYTHON_VERSION: "3.6.x" # currently 3.6.5
      PYTHON_ARCH: "32"

    - PYTHON: "C:\\Python36-x64"
      PYTHON_VERSION: "3.6.x" # currently 3.6.5
      PYTHON_ARCH: "64"

install:
  # If there is a newer build queued for the same PR, cancel this one.
  # The AppVeyor 'rollout builds' option is supposed to serve the same
  # purpose but it is problematic because it tends to cancel builds pushed
  # directly to master instead of just PR builds (or the converse).
  # credits: JuliaLang developers.
  - ps:
      if ($env:APPVEYOR_PULL_REQUEST_NUMBER -and $env:APPVEYOR_BUILD_NUMBER -ne ((Invoke-RestMethod `
      https://ci.appveyor.com/api/projects/$env:APPVEYOR_ACCOUNT_NAME/$env:APPVEYOR_PROJECT_SLUG/history?recordsNumber=50).builds | `
      Where-Object pullRequestId -eq $env:APPVEYOR_PULL_REQUEST_NUMBER)[0].buildNumber) { `
      throw "There are newer queued builds for this pull request, failing early." }
  - ECHO "Filesystem root:"
  - ps: 'ls "C:/"'

  - ECHO "Installed SDKs:"
  - ps: 'ls "C:/Program Files/Microsoft SDKs/Windows"'

  # Install Python (from the official .msi of https://python.org) and pip when
  # not already installed.
  - ps: if (-not(Test-Path($env:PYTHON))) { & scripts\install.ps1 }

  # Prepend newly installed Python to the PATH of this build (this cannot be
  # done from inside the powershell script as it would require to restart
  # the parent CMD process).
  - "SET PATH=%PYTHON%;%PYTHON%\\Scripts;%PATH%"

  # Check that we have the expected version and architecture for Python
  - "python --version"
  - 'python -c "import struct; print(struct.calcsize(''P'') * 8)"'

  # Upgrade to the latest version of pip to avoid it displaying warnings
  # about it being out of date.
  - "python -m pip install --upgrade pip"

  # Install the build dependencies of the project. If some dependencies contain
  # compiled extensions and are not provided as pre-built wheel packages,
  # pip will build them from source using the MSVC compiler matching the
  # target Python version and architecture
  - "%CMD_IN_ENV% pip install pipenv"
  - "%CMD_IN_ENV% pipenv install --system"
  - "%CMD_IN_ENV% pip install pypiwin32 pywin32-ctypes"

# build_script:
# Build the compiled extension

test_script:
  # Run the project tests and store results in .xml log
  - "%CMD_IN_ENV% pytest"

after_test:
  # If tests are successful, create binary packages for the project.
  - "%CMD_IN_ENV% pyinstaller pdc.py"
  - ps: ls .
  - ps: ls dist
  - dist\\pdc\\pdc --version > version.txt
  - ps: $env:VERSION= Get-Content version.txt
  - set ZIP_NAME=dist/pdc-%VERSION%-windows-%PYTHON_ARCH%.zip
  - ps: 'Compress-Archive -Path dist/pdc/* -CompressionLevel Optimal -DestinationPath "$env:ZIP_NAME"'
  - "mkdir \\gopath"
  - "set GOPATH=C:\\gopath"
  - "set PATH=%GOPATH%\\bin;%PATH%"
  - ps: "go get github.com/tcnksm/ghr"
  - ps: "ls C:\\gopath"
  - ps: "ghr --help"

artifacts:
  # Archive the generated packages in the ci.appveyor.com build report.
  - path: dist\*
#on_success:
#  - TODO: upload the content of dist/*.whl to a public wheelhouse
#
